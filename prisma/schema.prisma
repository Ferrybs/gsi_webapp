generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model match_player_deaths {
  id                 Int
  stats_id           String             @db.Uuid
  round_number       Int
  team_side_name     team_side
  hp_before          Int
  created_at         DateTime           @default(now()) @db.Timestamp(6)
  match_player_stats match_player_stats @relation(fields: [stats_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id, stats_id])
}

model match_player_kills {
  id                 Int
  stats_id           String             @db.Uuid
  round_number       Int
  team_side_name     team_side
  is_headshot        Boolean            @default(false)
  created_at         DateTime           @default(now()) @db.Timestamp(6)
  match_player_stats match_player_stats @relation(fields: [stats_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id, stats_id])
}

model match_player_rounds {
  stats_id              String             @db.Uuid
  round_number          Int
  team_side_name        team_side
  kills                 Int
  hs_kills              Int
  health                Int
  equipment_val         Int
  round_conclusion_name round_conclusion?
  created_at            DateTime           @default(now()) @db.Timestamp(6)
  updated_at            DateTime           @default(now()) @db.Timestamp(6)
  match_player_stats    match_player_stats @relation(fields: [stats_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([stats_id, round_number])
}

model match_player_stats {
  id                  String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  match_id            String                @unique @db.Uuid
  round               Int                   @default(0)
  ct_score            Int                   @default(0)
  t_score             Int                   @default(0)
  team_side_name      team_side
  kills               Int                   @default(0)
  deaths              Int                   @default(0)
  assists             Int                   @default(0)
  started_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  match_player_deaths match_player_deaths[]
  match_player_kills  match_player_kills[]
  match_player_rounds match_player_rounds[]
  matches             matches               @relation(fields: [match_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model matches {
  id                 String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  streamer_user_id   String              @db.Uuid
  map_name           map_name
  mode_name          map_mode
  phase_name         match_phase
  status_name        match_status
  started_at         DateTime            @default(now()) @db.Timestamp(6)
  updated_at         DateTime            @default(now()) @db.Timestamp(6)
  ended_at           DateTime?           @db.Timestamp(6)
  match_player_stats match_player_stats?
  streamers          streamers           @relation(fields: [streamer_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  stream_matches     stream_matches?
}

model point_packages {
  id             Int             @id @default(autoincrement())
  name           String
  points_amount  Decimal         @db.Decimal(20, 4)
  price          Decimal         @db.Decimal(20, 4)
  currency       currency
  bonus_points   Decimal         @default(0) @db.Decimal(20, 4)
  active         Boolean         @default(true)
  limit_per_user Int?
  created_at     DateTime        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime        @default(now()) @db.Timestamptz(6)
  user_payments  user_payments[]
}

model prediction_options {
  label                option_label
  template_id          Int
  created_at           DateTime             @default(now()) @db.Timestamp(6)
  prediction_templates prediction_templates @relation(fields: [template_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([label, template_id])
}

model prediction_templates {
  id                 Int                  @id @default(autoincrement())
  total_fee_pct      Decimal              @default(0) @db.Decimal(5, 4)
  min_bet_amount     Decimal              @default(0) @db.Decimal(20, 4)
  max_bet_amount     Decimal              @default(250000) @db.Decimal(20, 4)
  kind               prediction_kind      @unique
  template_status    template_status      @default(Active)
  threshold_round    Int
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  prediction_options prediction_options[]
  predictions        predictions[]
}

model predictions {
  id                               String                             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  template_id                      Int
  stream_match_id                  String                             @db.Uuid
  fees_total_collected             Decimal?                           @db.Decimal(20, 4)
  affiliate_fees_collected         Decimal?                           @db.Decimal(20, 4)
  site_fees_collected              Decimal?                           @db.Decimal(20, 4)
  winning_option_label             option_label?
  state                            bet_state                          @default(Open)
  created_at                       DateTime                           @default(now()) @db.Timestamp(6)
  updated_at                       DateTime                           @default(now()) @db.Timestamp(6)
  stream_matches                   stream_matches                     @relation(fields: [stream_match_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  prediction_templates             prediction_templates               @relation(fields: [template_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  streamer_prediction_transactions streamer_prediction_transactions[]
  user_predictions                 user_predictions[]

  @@unique([template_id, stream_match_id])
}

model stream_matches {
  id           String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  match_id     String              @unique @db.Uuid
  streamer_id  String              @db.Uuid
  match_status stream_match_status @default(Preparing)
  created_at   DateTime            @default(now()) @db.Timestamp(6)
  updated_at   DateTime            @default(now()) @db.Timestamp(6)
  predictions  predictions[]
  matches      matches             @relation(fields: [match_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  streamers    streamers           @relation(fields: [streamer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model stream_urls {
  streamer_id          String          @db.Uuid
  stream_provider_name stream_provider
  url                  String
  streamers            streamers       @relation(fields: [streamer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([streamer_id, stream_provider_name])
}

model streamer_prediction_transactions {
  id            String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  streamer_id   String           @db.Uuid
  prediction_id String           @db.Uuid
  amount        Decimal          @db.Decimal(20, 4)
  type          transaction_type
  created_at    DateTime         @default(now()) @db.Timestamp(6)
  predictions   predictions      @relation(fields: [prediction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  streamers     streamers        @relation(fields: [streamer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model streamers {
  id                               String                             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                          String                             @unique @db.Uuid
  username_id                      String                             @unique @db.VarChar(26)
  user_status                      user_status                        @default(Active)
  affiliate_balance                Decimal                            @default(0) @db.Decimal(20, 4)
  affiliate_fee_pct                Decimal                            @default(0) @db.Decimal(5, 4)
  display_name                     String?                            @db.VarChar(30)
  avatar_url                       String?
  matches                          matches[]
  stream_matches                   stream_matches[]
  stream_urls                      stream_urls[]
  streamer_prediction_transactions streamer_prediction_transactions[]
  users                            users                              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model trigger_audit_logs {
  id           Int              @id @default(autoincrement())
  fired_at     DateTime         @default(now()) @db.Timestamptz(6)
  trigger_name String
  event_type   audit_event_type
  description  String
  details      Json?
}

model user_balance_transactions {
  user_transaction_id String            @db.Uuid
  user_balance_id     String            @db.Uuid
  user_balances       user_balances     @relation(fields: [user_balance_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  user_transactions   user_transactions @relation(fields: [user_transaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_transaction_id, user_balance_id])
}

model user_balances {
  user_id                   String                      @id @db.Uuid
  balance                   Decimal                     @default(0) @db.Decimal(20, 4)
  event_balance             Decimal                     @default(0) @db.Decimal(20, 4)
  created_at                DateTime                    @default(now()) @db.Timestamptz(6)
  updated_at                DateTime                    @default(now()) @db.Timestamptz(6)
  user_balance_transactions user_balance_transactions[]
  users                     users                       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_payment_transactions {
  user_transaction_id String            @db.Uuid
  user_payment_id     String            @db.Uuid
  user_payments       user_payments     @relation(fields: [user_payment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_transactions   user_transactions @relation(fields: [user_transaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_transaction_id, user_payment_id])
}

model user_payments {
  id                        String                      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                   String                      @db.Uuid
  provider                  payment_provider
  provider_transaction_id   String?
  package_id                Int
  status                    payment_status              @default(Pending)
  created_at                DateTime                    @default(now()) @db.Timestamp(6)
  updated_at                DateTime                    @default(now()) @db.Timestamp(6)
  user_payment_transactions user_payment_transactions[]
  point_packages            point_packages              @relation(fields: [package_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                     users                       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_prediction_transactions {
  user_transaction_id String            @db.Uuid
  user_prediction_id  String            @db.Uuid
  user_predictions    user_predictions  @relation(fields: [user_prediction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_transactions   user_transactions @relation(fields: [user_transaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_transaction_id, user_prediction_id])
}

model user_predictions {
  id                           String                         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                      String                         @db.Uuid
  prediction_id                String                         @db.Uuid
  option_label                 option_label
  amount                       Decimal                        @db.Decimal(20, 4)
  created_at                   DateTime                       @default(now()) @db.Timestamp(6)
  user_prediction_transactions user_prediction_transactions[]
  predictions                  predictions                    @relation(fields: [prediction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                        users                          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_preferences {
  user_id        String   @id @db.Uuid
  currency       currency @default(BRL)
  cookie_consent Boolean  @default(false)
  users          users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_roles {
  user_id   String    @db.Uuid
  role_name role_type
  users     users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role_name])
}

model user_transactions {
  id                           String                         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                      String                         @db.Uuid
  amount                       Decimal                        @db.Decimal(20, 4)
  type                         transaction_type
  description                  String?
  created_at                   DateTime                       @default(now()) @db.Timestamp(6)
  user_balance_transactions    user_balance_transactions[]
  user_payment_transactions    user_payment_transactions[]
  user_prediction_transactions user_prediction_transactions[]
  users                        users                          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  steam_id          String              @unique @db.VarChar(50)
  username          String              @db.VarChar(100)
  email             String?             @db.VarChar(100)
  avatar_url        String?
  trade_link        String?
  steam_token       String?
  user_status_name  user_status         @default(Active)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  streamers         streamers?
  user_balances     user_balances?
  user_payments     user_payments[]
  user_predictions  user_predictions[]
  user_preferences  user_preferences?
  user_roles        user_roles[]
  user_transactions user_transactions[]
}

enum audit_event_type {
  Action
  Exception
}

enum bet_state {
  Open
  Closed
  Resolved
  Canceled
}

enum currency {
  BRL
  USD
  USDC
}

enum map_mode {
  Competitive
}

enum map_name {
  de_dust2
  de_inferno
  de_mirage
  de_nuke
  de_overpass
  de_vertigo
  de_ancient
  de_anubis
  de_cache
  de_train
  de_community
}

enum match_phase {
  Live
  Warmup
  Intermission
  Gameover
}

enum match_status {
  Detected
  Started
  InProgress
  Finished
  Abandoned
  Invalid
}

enum match_tracking_status {
  Collecting
  Invalid
  Verified
}

enum option_label {
  yes
  no
}

enum payment_provider {
  Coinbase
  Stripe
}

enum payment_status {
  Pending
  Processing
  Completed
  Failed
  Canceled
  Refunded
}

enum prediction_kind {
  MatchOutcome
  KillsOverTwenty
  DeathsUnder
  RoundAce
  FourKillsOneRound
}

enum role_type {
  EventsLog
  Streamer
  User
  Admin
}

enum round_conclusion {
  t_win_elimination
  t_win_bomb
  t_win_time
  ct_win_elimination
  ct_win_defuse
  ct_win_rescue
  ct_win_time
}

enum stream_match_status {
  Preparing
  Live
  Finished
  Invalidated
}

enum stream_provider {
  twitch
  youtube
}

enum team_side {
  T
  CT
}

enum template_status {
  Active
  Inactive
  Deprecated
}

enum transaction_type {
  Deposit
  Reward
  Predict
  Exchange
  Refund
}

enum user_status {
  Active
  Inative
  Deleted
}
